#CLASS {RL_PATHWALKER} {kill};
#CLASS {RL_PATHWALKER} {open};

/**********************************************************************************************************************
 * Module RL_PATHWALKER                                                                                               *
 *                                                                                                                    *
 * Runs automatically through straight paths                                                                          *
 **********************************************************************************************************************/

/register_module {RL_PATHWALKER} {Rumbo} {Recorrido automático de caminos (como el comando galopar).};
/add_module_setting {RL_PATHWALKER} {delay} {number} {} {1} {Segundos entre dirección y dirección};

/**********************************************************************************************************************
 * Aliases                                                                                                            *
 **********************************************************************************************************************/

/*
 * Alias /rumbo {direction|off}
 *
 * Walks a straight path towards the given direction.
 *
 * Arguments:
 *   %1 (any) direction|off
 *
 * Example:
 *   /rumbo {e};
 */
#ALIAS {/rumbo} {
    #CLASS {RL_PATHWALKER_IMPL} {open};
    #IF {"%1" == ""} {
        /message {Sintáxis: /rumbo <dirección|off>};
        #RETURN;
    };
    #ALIAS {/limpiar_rumbo} {
        #CLASS {RL_PATHWALKER_IMPL} {kill};
        /message {%%1};
        #UNVAR {lastVisitedExit};
        #UNVAR {exits};
        #UNDELAY {pathwalker_movement};
        #UNALIAS {/limpiar_rumbo};
    };
    #IF {"%1" == "off"} {
        /limpiar_rumbo {Rumbo detenido.};
        #RETURN;
    };
    #VAR {lastVisitedExit} {@opposite_direction{%1}};
    #ACT {^%%* [{[noseabdr,|]+[noseabdr|]*}]{[ ]*}$} {
        #VAR {exits} {%%2};
        #REPLACE {exits} {,} {;};
        #LIST {exits} {create} {$exits};
        #LIST {exits} {size} {exitsLength};
        #IF {$exitsLength > 2} {
            /limpiar_rumbo {Has llegado a una bifurcación en el camino.};
        };
        #ELSEIF {$exitsLength < 2} {
            /limpiar_rumbo {Has llegado a un callejón sin salida.};
        };
        #ELSE {
            #FOREACH {$exits[%%*]} {exit} {
                #IF {"$exit" != "$lastVisitedExit"} {
                    #VAR {lastVisitedExit} {@opposite_direction{$exit}};
                    #DELAY {pathwalker_movement} {$exit} {@get_module_setting_value{RL_PATHWALKER;delay}};
                    #BREAK;
                };
            };
        };
    };
    #ACT {^Parece que %* no produjo efecto alguno.$} {
        /limpiar_rumbo {Deteniendo el rumbo, pues algo raro ha sucedido.};
    };
    /message {Caminando rumbo %1...};
    #SEND {%1};
    #CLASS {RL_PATHWALKER_IMPL} {close};
}

/**********************************************************************************************************************
 * Autocompletion                                                                                                     *
 **********************************************************************************************************************/

#TAB {/rumbo};

/**********************************************************************************************************************
 * Testing                                                                                                            *
 **********************************************************************************************************************/

#IF {$_development == 1} {
    #ALIAS {/test_RL_PATHWALKER} {
        #SHOWME {No tests implemented.};
    };
};

#CLASS {RL_PATHWALKER} {close};
