#CLASS {RL_GMCP} {kill};
#CLASS {RL_GMCP} {open};

/**********************************************************************************************************************
 * Module RL_GMCP                                                                                                     *
 *                                                                                                                    *
 * GMCP support module.                                                                                               *
 **********************************************************************************************************************/

/register_module {RL_GMCP} {GMCP} {Soport para GMCP.};

/**********************************************************************************************************************
 * Variables                                                                                                          *
 **********************************************************************************************************************/

#VAR {rl_gmcp} {};
#VAR {rl_gmcp[debug]} {0};
#VAR {rl_gmcp[channels]} {};

#FORMAT {rl_gmcp.IAC} {%a} {255};
#FORMAT {rl_gmcp.DONT} {%a} {254};
#FORMAT {rl_gmcp.DO} {%a} {253};
#FORMAT {rl_gmcp.WONT} {%a} {252};
#FORMAT {rl_gmcp.WILL} {%a} {251};
#FORMAT {rl_gmcp.SB} {%a} {250};
#FORMAT {rl_gmcp.SE} {%a} {240};
#FORMAT {rl_gmcp.GMCP} {%a} {201};

/**********************************************************************************************************************
 * Events                                                                                                             *
 **********************************************************************************************************************/

#EVENT {IAC WILL GMCP} {
    #IF {$rl_gmcp[debug] == 1} {
        /message {Subscribing to GMCP modules};
    };
    #SEND {$rl_gmcp[IAC]$rl_gmcp[DO]$rl_gmcp[GMCP]\};
    #SEND {$rl_gmcp[IAC]$rl_gmcp[SB]${rl_gmcp[GMCP]}Core.Hello { "client": "RL++", "version": "0.2.0" }$rl_gmcp[IAC]$rl_gmcp[SE]\};
    #SEND {$rl_gmcp[IAC]$rl_gmcp[SB]${rl_gmcp[GMCP]}Core.Supports.Add ["Char 1", "Char.Skills 1", "Char.Items 1", "Room 1", "IRE.Rift 1", "Ire.Composer 1", "Comm 1"]$rl_gmcp[IAC]$rl_gmcp[SE]\};
};

#EVENT {IAC SB GMCP Client.GUI IAC SE} {
    #IF {$rl_gmcp[debug] == 1} {
        /message {Received GMCP Client.GUI event};
    };
};

#EVENT {IAC SB GMCP Char.Ficha IAC SE} {

    #NOP TODO: Make events here;

    #IF {$rl_gmcp[debug] == 1} {
        /message {Received GMCP Char.Ficha event};
    };
    #VAR {gmcp_data_char_ficha} {%0};
    #IF {"$gmcp_data_char_ficha[nombre]" != ""} {
        #VAR {rl_player[stats][name]} {$gmcp_data_char_ficha[nombre]};
        #DELAY {2} {
            /message {Â¡RL++ te da la bienvenida, $rl_player[stats][name]!};
        };
    };
    #IF {"$gmcp_data_char_ficha[nivel]" != ""} {
        #VAR {rl_player[stats][level]} {$gmcp_data_char_ficha[nivel]};
        #VAR {rl_player[stats][weighted_level]} {@weighted_level{$gmcp_data_char_ficha[nivel]}};
    };
    #IF {"$gmcp_data_char_ficha[clase]" != ""} {
        #VAR {rl_player[stats][class]} {$gmcp_data_char_ficha[clase]};
    };
    #UNVAR {gmcp_data_char_ficha};
};

#EVENT {IAC SB GMCP Char.Status IAC SE} {
    #IF {$rl_gmcp[debug] == 1} {
        /message {Received GMCP Char.Status event};
    };
    #VAR {gmcp_data_char_status} {%0};
    #IF {"$gmcp_data_char_status[pe][min]" != ""} {
        /trigger_event player_gp $gmcp_data_char_status[pe][min];
    };
    #IF {"$gmcp_data_char_status[pe][max]" != ""} {
        /trigger_event player_gp_max $gmcp_data_char_status[pe][max];
    };
    #IF {"$gmcp_data_char_status[pvs][min]" != ""} {
        /trigger_event player_hp $gmcp_data_char_status[pvs][min];
    };
    #IF {"$gmcp_data_char_status[pvs][max]" != ""} {
        /trigger_event player_hp_max $gmcp_data_char_status[pvs][max];
    };
    #UNVAR {gmcp_data_char_status};
};

#EVENT {IAC SB GMCP Comm.Canales IAC SE} {
    #IF {$rl_gmcp[debug] == 1} {
        /message {Received GMCP Comm.Canales event};
        #VAR {rl_gmcp[channels]} {%0};
        #SHOWME {[%1]};
    };
};

#EVENT {IAC SB GMCP Comm.EnciendeCanal IAC SE} {
    #IF {$rl_gmcp[debug] == 1} {
        /message {Received GMCP Comm.EnciendeCanal event};
        #SHOWME {[%1]};
    };
};

#EVENT {IAC SB GMCP Comm.ApagaCanal IAC SE} {
    #IF {$rl_gmcp[debug] == 1} {
        /message {Received GMCP Comm.ApagaCanal event};
        #SHOWME {[%1]};
    };
};

#EVENT {IAC SB GMCP Comm.MensajeCanal IAC SE} {
    #IF {$rl_gmcp[debug] == 1} {
        /message {Received GMCP Comm.MensajeCanal event};        
    };
    #VAR {gmcp_data_channel_data} {%0};
    #VAR {gmcp_data_channel_name} {$gmcp_data_channel_data[canal]};
    #VAR {gmcp_data_channel_message} {$gmcp_data_channel_data[mensaje]};
    #REPLACE {gmcp_data_channel_message} {u001B} {e};
    #NOP #SHOWME {$gmcp_data_channel_name};
    #SHOWME {$gmcp_data_channel_message};
    #UNVAR {gmcp_data_channel_data};
    #UNVAR {gmcp_data_channel_name};
    #UNVAR {gmcp_data_channel_message};
};

#EVENT {IAC SB GMCP Mapa IAC SE} {
    #IF {$rl_gmcp[debug] == 1} {
        /message {Received GMCP Mapa event};
        #SHOWME {[%1]};
    };
};

/**********************************************************************************************************************
 * Testing                                                                                                            *
 **********************************************************************************************************************/

#IF {$_development == 1} {
    #ALIAS {/test_RL_GMCP} {
        #SHOWME {No tests implemented.};
    };
};

#CLASS {RL_GMCP} {close};
